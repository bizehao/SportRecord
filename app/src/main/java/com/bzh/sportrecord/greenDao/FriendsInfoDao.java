package com.bzh.sportrecord.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bzh.sportrecord.greenModel.FriendsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIENDS_INFO".
*/
public class FriendsInfoDao extends AbstractDao<FriendsInfo, Long> {

    public static final String TABLENAME = "FRIENDS_INFO";

    /**
     * Properties of entity FriendsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Headportrait = new Property(3, String.class, "headportrait", false, "HEADPORTRAIT");
        public final static Property Descript = new Property(4, String.class, "descript", false, "DESCRIPT");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Motto = new Property(6, String.class, "motto", false, "MOTTO");
        public final static Property Remarkname = new Property(7, String.class, "remarkname", false, "REMARKNAME");
    }


    public FriendsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FriendsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIENDS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"NAME\" TEXT," + // 2: name
                "\"HEADPORTRAIT\" TEXT," + // 3: headportrait
                "\"DESCRIPT\" TEXT," + // 4: descript
                "\"ADDRESS\" TEXT," + // 5: address
                "\"MOTTO\" TEXT," + // 6: motto
                "\"REMARKNAME\" TEXT);"); // 7: remarkname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIENDS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendsInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String headportrait = entity.getHeadportrait();
        if (headportrait != null) {
            stmt.bindString(4, headportrait);
        }
 
        String descript = entity.getDescript();
        if (descript != null) {
            stmt.bindString(5, descript);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(7, motto);
        }
 
        String remarkname = entity.getRemarkname();
        if (remarkname != null) {
            stmt.bindString(8, remarkname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendsInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String headportrait = entity.getHeadportrait();
        if (headportrait != null) {
            stmt.bindString(4, headportrait);
        }
 
        String descript = entity.getDescript();
        if (descript != null) {
            stmt.bindString(5, descript);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(7, motto);
        }
 
        String remarkname = entity.getRemarkname();
        if (remarkname != null) {
            stmt.bindString(8, remarkname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendsInfo readEntity(Cursor cursor, int offset) {
        FriendsInfo entity = new FriendsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headportrait
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // descript
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // motto
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remarkname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendsInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadportrait(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescript(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMotto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemarkname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendsInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendsInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
